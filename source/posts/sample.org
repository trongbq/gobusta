#+title: Sample org post content
#+date: <2020-10-14 Wed>

This article offers a sample of basic orgmode syntax that can be used in this blog post files, also it shows whether basic HTML elements are decorated with CSS.

* Headings
The following HTML ~<h1>~-~<h6>~ elements represent six levels of section headings. ~<h1>~ is the highest section level while ~<h6>~ is the lowest.

* H1

** H2

*** H3

**** H4

***** H5

****** H6

* Paragraph
Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.

Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.

* Blockquotes
The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a ~footer~ or ~cite~ element, and optionally with in-line changes such as annotations and abbreviations.

#+BEGIN_QUOTE
Donâ€™t communicate by sharing memory, share memory by communicating. -- Rob Pike
#+END_QUOTE

#+CAPTION: If you feel the desire to write a book, what would it be about? - Photo by Glenn Carstens-Peters on Unsplash
[[/static/img/glenn-carstens-peters-npxXWgQ33ZQ-unsplash.jpg]]


* Tables
| Name  | Phone | Age |
|-------+-------+-----|
| Peter |  1234 |  17 |
| Anna  |  4321 |  25 |

* Code blocks
#+BEGIN_SRC go
func parse(name string, src []byte, flags parser.Mode) *ast.File {
	ast1, err := parser.ParseFile(fset, name, src, flags)
	if err != nil {
		if list, ok := err.(scanner.ErrorList); ok {
			// If err is a scanner.ErrorList, its String will print just
			// the first error and then (+n more errors).
			// Instead, turn it into a new Error that will return
			// details for all the errors.
			for _, e := range list {
				fmt.Fprintln(os.Stderr, e)
			}
			os.Exit(2)
		}
		fatalf("parsing %s: %s", name, err)
	}
	return ast1
}
#+END_SRC

* List types
** Ordered List
1. Item 1
2. Item 2
3. Item 3
** Unordered List
- Item 1
- Item 2
- Item 3
** Nested List
- Item 1
  - Item 1.1
  - Item 1.2
  - Item 1.3
- Item 2
  - Item 2.1
  - Item 2.2

And many more...
